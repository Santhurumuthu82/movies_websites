{"ast":null,"code":"var _jsxFileName = \"D:\\\\backend\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport AddMovieForm from './components/AddMovieForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5001/movies';\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n\n  // Fetch movies from the backend\n  const fetchMovies = async () => {\n    try {\n      const res = await axios.get(API_URL);\n      console.log(\"Fetched Movies: \", res.data); // Log fetched movies\n      setMovies(res.data);\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error.response ? error.response.data : error.message);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n  const addMovie = async newMovie => {\n    try {\n      console.log(\"Sending movie data:\", newMovie); // Log movie data to be sent\n\n      const response = await axios.post(\"http://localhost:5001/movies/\", newMovie, {\n        headers: {\n          'Content-Type': 'application/json' // Ensure JSON header is set\n        }\n      });\n      console.log(\"Response from server (POST):\", response.data); // Log server response\n      fetchMovies(); // Refresh movie list after successfully adding a movie\n    } catch (error) {\n      console.error(\"There was an error adding the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n  const editMovie = async (id, updatedMovie) => {\n    try {\n      console.log(\"Updating movie with id:\", id, \"Data:\", updatedMovie); // Log update attempt\n\n      const response = await axios.put(`${API_URL}/${id}`, updatedMovie, {\n        headers: {\n          'Content-Type': 'application/json' // Ensure JSON header is set for PUT as well\n        }\n      });\n      console.log(\"Response from server (PUT):\", response.data); // Log server response\n      fetchMovies(); // Refresh movie list after updating\n    } catch (error) {\n      console.error(\"There was an error updating the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n  const deleteMovie = async id => {\n    try {\n      console.log(\"Deleting movie with id:\", id); // Log delete attempt\n\n      const response = await axios.delete(`${API_URL}/${id}`);\n      console.log(\"Response from server (DELETE):\", response.data); // Log server response\n      fetchMovies(); // Refresh movie list after deleting\n    } catch (error) {\n      console.error(\"There was an error deleting the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddMovieForm, {\n      addMovie: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      editMovie: editMovie,\n      deleteMovie: deleteMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","AddMovieForm","jsxDEV","_jsxDEV","API_URL","App","_s","movies","setMovies","fetchMovies","res","get","console","log","data","error","response","message","addMovie","newMovie","post","headers","editMovie","id","updatedMovie","put","deleteMovie","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/backend/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport AddMovieForm from './components/AddMovieForm';\nconst API_URL = 'http://localhost:5001/movies';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  // Fetch movies from the backend\n  const fetchMovies = async () => {\n    try {\n      const res = await axios.get(API_URL);\n      console.log(\"Fetched Movies: \", res.data); // Log fetched movies\n      setMovies(res.data);\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error.response ? error.response.data : error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n\n  const addMovie = async (newMovie) => {\n    try {\n      console.log(\"Sending movie data:\", newMovie);  // Log movie data to be sent\n\n      const response =await axios.post(\"http://localhost:5001/movies/\", newMovie, {\n        headers: {\n          'Content-Type': 'application/json' // Ensure JSON header is set\n        }\n      });\n\n      console.log(\"Response from server (POST):\", response.data);  // Log server response\n      fetchMovies(); // Refresh movie list after successfully adding a movie\n    } catch (error) {\n      console.error(\"There was an error adding the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n\n  const editMovie = async (id, updatedMovie) => {\n    try {\n      console.log(\"Updating movie with id:\", id, \"Data:\", updatedMovie);  // Log update attempt\n\n      const response = await axios.put(`${API_URL}/${id}`, updatedMovie, {\n        headers: {\n          'Content-Type': 'application/json' // Ensure JSON header is set for PUT as well\n        }\n      });\n\n      console.log(\"Response from server (PUT):\", response.data);  // Log server response\n      fetchMovies(); // Refresh movie list after updating\n    } catch (error) {\n      console.error(\"There was an error updating the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n\n  const deleteMovie = async (id) => {\n    try {\n      console.log(\"Deleting movie with id:\", id);  // Log delete attempt\n\n      const response = await axios.delete(`${API_URL}/${id}`);\n      console.log(\"Response from server (DELETE):\", response.data);  // Log server response\n      fetchMovies(); // Refresh movie list after deleting\n    } catch (error) {\n      console.error(\"There was an error deleting the movie:\", error.response ? error.response.data : error.message);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Movie App</h1>\n      <AddMovieForm addMovie={addMovie} />\n      <MovieList movies={movies} />\n      <MovieList editMovie={editMovie} deleteMovie={deleteMovie} />\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}